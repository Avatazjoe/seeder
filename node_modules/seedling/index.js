/*

	Seedling module's purpose is to mediate connections to seeders data,
	which is split between a mongoDB store and a MYSQL Instance
	
	Seedling will manage the addition and authentication of users
	
*/


var seedling = exports;
var mysql = require('mysql');
var crypto = require('crypto')
var db;
var hashkey = 'e2580841-7a3a-4843-a711-bfd0ceffd59e';
var hash;



var connection = mysql.createConnection({
  host     : 'localhost',
  user     : 'root',
  password : '',
  database: "seederDATA"
});


//utility function to grab from the mongodb database and copy graph metadata into the mysql db
// this should not be used routinely and is for special purposes at the inset of development.

seedling.syncDBS = function(){

		db.createCollection('publicgraphs', function (err, collection) {
		
		    collection.find().toArray(function (err, items) {
		        items.forEach(function (obj) {
		            var graph = 
		            {
		            			graphid : obj.graphid, 
		            			userid : 1 , 
		            			graphname : obj.graphname, 
		            			description : obj.graphdesc, 
		            			nodecount : obj.graphmeta.nsize, 
		            			edgecount : obj.graphmeta.esize, 
		            			created : '2014-08-13 00:00:00'
		            }
		            var query = connection.query('INSERT INTO graphs SET ?;', graph, function(err, results) {
		            	});
		        });
		    });
		});

}



seedling.verifyAuthPair = function(requsername, reqpass, next){
	
	//check if username exists
	
	connection.query('SELECT * FROM users WHERE username  = \'' + requsername + '\';', function(err, res){
			
			if(res[0]){
			//username exists
			//one result should be returned 
			
			//generate a hash from the submitted password + the saved guid
			hash = crypto.createHmac('sha512', hashkey);
			hash.update(reqpass+res[0].guid);
			var hashedpass = hash.digest('hex');
			
			console.log(res[0]);
			//console.log(hashedpass);
			
				if(hashedpass == res[0].password){
				//compare the hashed password to the stored hashed password and confirm or
				//refuse the connection
				next(res[0], 1);
				
				}else{
					next('AUTH :: Incorrect Username / Password', 0);
				}
				
			}else{
			next('AUTH :: Incorrect Username / Password', 0);
			}
			
	});

}



//seedling.registerUser(req.uname, req.fname, req.sname, req.guid, req.pass, req.email);
seedling.registerUser = function(regusername, regforename, regsurname, regpass, regemail, next){


connection.query('SELECT * FROM users WHERE username  = \'' + regusername + '\';', function(err, res){
		if(res[0]){
		
		//username exists already
		console.log(res);
		next('username already exists');
		
		}else{
							
							//user does not exist
							//generate a GUID
							var regguid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
							    var rf = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
							    return v.toString(16);
							});
					
					    //generate hash of passowrd and GUID
					    hash = crypto.createHmac('sha512', hashkey);
					    hash.update(regpass+regguid);
					    //keep hash in hex
					    var hashedpass = hash.digest('hex');
					    var user = 
					    {
					    	username : regusername,
					    	firstname : regforename,
					    	lastname : regsurname,
					    	email : regemail,
					    	password : hashedpass,
					    	guid : regguid,
					    	avatarurl : 'http://placehold.it/150x150.png',
					    	bio : 'tell us something about yourself',
					    	locationid : 1, 
					    	created : '2014-08-13 00:00:00',
					    	bannerurl : 'http://placehold.it/150x150.png'
					    }
					    
					   	//add the data to the users database
					    connection.query('INSERT INTO users SET ?;', user, function (err, results){ next(err); });
		
		
		}
});



	

}



seedling.init = function(database_connection){
	
	//connect mysql database
	connection.connect();
	//hold reference to mongodb connection created by the server
	db = database_connection;
	//make sure graph data is synchronised between the two databases
	//this.syncDBS();
	
	

}

